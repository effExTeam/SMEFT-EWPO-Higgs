(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
contShdLst[col_,sigmas_,oplst_:{0.8,0.1}]:={Sequence@@(Blend[{Directive[Darker@col,Opacity[First@oplst]],Directive[White,Opacity[Last@oplst]]},1/#]&/@Range[Length@sigmas+1])}
Options[custompost2D]=Join[Options[ContourPlot],Options[SmoothKernelDistribution]]~Join~{color->Blue,range->All,xyLabel->"Default",points->200,siglst->{1,2,3},contourStyle->None,contourShading->"Default"};


(* ::Input::Initialization:: *)
custompost2D[mcres_,parinds_List,opts:OptionsPattern[]]:=
Module[{dat=(#[[parinds]]&/@mcres["ParameterRun"])[[mcres["BurnEnd"];;]],dist,rng,conlst,lab,cpl,shd},
dist=SmoothKernelDistribution[dat,Evaluate[FilterRules[{opts},Options[SmoothKernelDistribution]]]];
rng=If[OptionValue[range]===All,{MinMax[First/@#],MinMax[Last/@#]}&@dat,OptionValue[range]];
conlst=conpdf[dist,OptionValue[points],OptionValue[siglst]][rng];
If[OptionValue[xyLabel]=!="Default",
If[!(ListQ[OptionValue[xyLabel]]&&Length[OptionValue[xyLabel]]===Length[parinds]),
Message[Posterior2D::nomatch];Abort[]
]
];
shd=If[OptionValue[contourShading]==="Default",Evaluate[contShdLst[OptionValue[color],OptionValue[siglst]]],OptionValue[contourShading]];
lab=If[OptionValue[xyLabel]==="Default",ToString/@(mcres["Parameters"][[parinds]]),OptionValue[xyLabel]];
cpl=
ContourPlot[PDF[dist,{x,y}],Evaluate[{x,Sequence@@rng[[1]]}],Evaluate[{y,Sequence@@rng[[2]]}],Contours->conlst,ContourStyle->OptionValue[contourStyle],
ContourShading->shd,PlotRange->All,Evaluate[FilterRules[{opts},Options[ContourPlot]]]];
Show[cpl,FrameStyle->Directive[Black],FrameTicksStyle->Directive[Black,Italic,FontFamily->"Times",FontSize->20],
FrameLabel->Evaluate[Style[#,Black,Italic,FontFamily->"Times",FontSize->26]&/@lab],GridLinesStyle->Directive[Gray,Dotted],ImageSize->Large,PlotRange->rng]
]
ClearAll[datawc]
Options[datawc]={"CompilationTarget"->"WVM"};
datawc[mcrun_,file_,extraconstraints_,OptionsPattern[]]:=
Module[{modelparam,dataparam,exp},
modelparam=mcrun["Parameters"];
dataparam=(*#[[Range[Length@modelparam]]]&/@*)mcrun["ParameterRun"][[mcrun["BurnEnd"];;]];
exp=Block[{funcc=((Last[#]*\[CapitalLambda]^2)&/@file[[2]])/.extraconstraints/.rplst},
Compile[Evaluate[{#,_Real}&/@modelparam],funcc,
RuntimeAttributes->{Listable},CompilationOptions->{"InlineExternalDefinitions"->True},RuntimeOptions->{"EvaluateSymbolically"->False,"WarningMessages"->False},
Parallelization->True,CompilationTarget->OptionValue["CompilationTarget"]]
];
exp@@@dataparam
]


(* ::Input::Initialization:: *)
ClearAll[wcposterior2D]
Options[wcposterior2D]=Join[Options[ContourPlot],Options[SmoothKernelDistribution]]~Join~{extraconstraints-> {},color->Blue,range->All,xyLabel->"Default",points->300,siglst->{1,2,3},contourStyle->None,contourShading->"Default" };
wcposterior2D[datawc_,param_List,modelfile_,opts:OptionsPattern[]]:=
Module[{parinds,dat,exp,datwc,dist,rng,conlst,lab,shd,cpl},
dat=datawc[[All,param]];
dist=SmoothKernelDistribution[dat,Evaluate[FilterRules[{opts},Options[SmoothKernelDistribution]]]];
rng=If[OptionValue[range]===All,{MinMax[First/@#],MinMax[Last/@#]}&@dat,OptionValue[range]];
conlst=conpdf[dist,OptionValue[points],OptionValue[siglst]][rng];
If[OptionValue[xyLabel]=!="Default",
If[!(ListQ[OptionValue[xyLabel]]&&Length[OptionValue[xyLabel]]===Length[param]),
Message[Posterior2D::nomatch];Abort[]
]
];
lab=If[OptionValue[xyLabel]==="Default",First/@modelfile[[2]][[param]],OptionValue[xyLabel]];
shd=If[OptionValue[contourShading]==="Default",Evaluate[contShdLst[OptionValue[color],OptionValue[siglst]]],OptionValue[contourShading]];
cpl=
ContourPlot[PDF[dist,{x,y}],Evaluate[{x,Sequence@@rng[[1]]}],Evaluate[{y,Sequence@@rng[[2]]}],Contours->conlst,ContourStyle->OptionValue[contourStyle],
ContourShading->shd,PlotRange->All,Evaluate[FilterRules[{opts},Options[ContourPlot]]]];
Show[cpl,FrameStyle->Directive[Black],FrameTicksStyle->Directive[Black,Italic,FontFamily->"Times",FontSize->15],
FrameLabel->Evaluate[Style[#,Black,Italic,FontFamily->"Times",FontSize->26]&/@lab],GridLinesStyle->Directive[Gray,Dotted],ImageSize->Large,PlotRange-> rng]
]


(* ::Input::Initialization:: *)
wcPlotFromModel[mcres_,mod_,extraconstraints_,wcs_,col_,sl_,rng_]:=Block[{params=Position[mod[[2]]/.replstwc,ToString[#]][[1,1]]&/@wcs},
wcposterior2D[datawc[mcres,mod, extraconstraints],params,mod,color->col,siglst->sl,xyLabel->wcs/.stringlstwc,range->rng,points->300,contourStyle->None,contourShading->"Default",PerformanceGoal->"Quality",GridLines->Automatic,PlotPoints->70,AspectRatio->1]
]


(* ::Input::Initialization:: *)
wcPlotFromModelCL[mcres_,mod_,extraconstraints_,wcs_,col_,sl_,rng_]:=Block[{params=Position[mod[[2]]/.replstwc,ToString[#]][[1,1]]&/@wcs},
wcposterior2D[datawc[mcres,mod, extraconstraints],params,mod,color->col,siglst->sl,xyLabel->wcs/.stringlstwc,range->rng,points->300,contourStyle->{Directive[col,Dashed],Directive[col]},contourShading->None,PerformanceGoal->"Quality",GridLines->Automatic,PlotPoints->70,AspectRatio->1]
]


(* ::Input::Initialization:: *)
legboxCL[col_]:=Show[RegionPlot[0<=x<=1&&0<=y<=1,{x,0,1},{y,0,1},Frame->False,BoundaryStyle->Directive[col,Thick,Dashed],PlotStyle->None],RegionPlot[0.25<=x<=0.75&&0.25<=y<=0.75,{x,0,1},{y,0,1},Frame->False,BoundaryStyle->Directive[col,Thick],PlotStyle->None]]


(* ::Input::Initialization:: *)
legboxFL[col_]:=Show[RegionPlot[0<=x<=1&&0<=y<=1,{x,0,1},{y,0,1},Frame->False,BoundaryStyle->None,PlotStyle->Directive[col,Opacity[0.3]]],RegionPlot[0.25<=x<=0.75&&0.25<=y<=0.75,{x,0,1},{y,0,1},Frame->False,BoundaryStyle->None,PlotStyle->Directive[col,Opacity[0.3]]]]
ClearAll[customLegCL,customLegFL,customLegCL2,customLegFL2];
customLegCL[lst_,colst_,lab_,size_:30,opts:OptionsPattern[]]:=
With[{cls = Take[colst, Length@lst]},
SwatchLegend[cls,lst,LegendMarkers->legboxCL/@cls,LegendMarkerSize->size,LabelStyle->Directive[Black,Italic,FontSize->size-10,FontFamily->"Times New Roman"],LegendLabel->Style[lab,size-10+2],opts]
  ]
customLegFL[lst_,colst_,lab_,size_:30,opts:OptionsPattern[]]:=
With[{cls = Take[colst, Length@lst]},
SwatchLegend[cls,lst,LegendMarkers->legboxFL/@cls,LegendMarkerSize->size,LabelStyle->Directive[Black,Italic,FontSize->size-10,FontFamily->"Times New Roman"],LegendLabel->Style[lab,size-10+2],opts]
  ]
customLegCL2[lst_,colst_,size_:30,opts:OptionsPattern[]]:=
With[{cls = Take[colst, Length@lst]},
SwatchLegend[cls,lst,LegendMarkers->legboxCL/@cls,LegendMarkerSize->size,LabelStyle->Directive[Black,Italic,FontSize->size-10,FontFamily->"Times New Roman"],opts]
  ]
customLegFL2[lst_,colst_,size_:30,opts:OptionsPattern[]]:=
With[{cls = Take[colst, Length@lst]},
SwatchLegend[cls,lst,LegendMarkers->legboxFL/@cls,LegendMarkerSize->size,LabelStyle->Directive[Black,Italic,FontSize->size-10,FontFamily->"Times New Roman"],opts]
  ]


(* ::Input::Initialization:: *)
SetAttributes[{contShdLst,custompost2D,datawc,wcposterior2D,wcPlotFromModel,wcPlotFromModelCL,legboxCL,legboxFL,customLegCL,customLegFL,customLegCL2,customLegFL2},{Protected,ReadProtected,Locked}]



